(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(15),r=n.n(o),c=n(645),s=n.n(c)()(r());s.push([e.id,"body {\n  background-color: white;\n}\n\n.header {\n  margin-left: 1%;\n  margin-bottom: 2%;\n}\n\n.recent {\n  display: flex;\n  margin-left: 1.3%;\n  align-items: center;\n  justify-content: space-between;\n}\n\ntable {\n  margin-left: 1.25%;\n}\n\nth {\n  width: 100px;\n}\n\n.table {\n  border: solid 2px black;\n}\n\n.left_side {\n  width: 30%;\n}\n\n.content {\n  display: flex;\n  width: 60%;\n}\n\n.right_side {\n  margin-left: 120px;\n  width: 280px;\n}\n\n.input {\n  margin-bottom: 10px;\n  border: 2px double black;\n  width: 100%;\n}\n\n.submit {\n  width: 75px;\n  height: 30px;\n  border: double 2px black;\n  color: black;\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 20px;\n  font-weight: 600;\n  background-color: white;\n}\n\n.align {\n  margin-top: 15px;\n  float: right;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,wBAAwB;EACxB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,wBAAwB;EACxB,YAAY;EACZ,qBAAqB;EACrB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;EACjB,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd",sourcesContent:["body {\n  background-color: white;\n}\n\n.header {\n  margin-left: 1%;\n  margin-bottom: 2%;\n}\n\n.recent {\n  display: flex;\n  margin-left: 1.3%;\n  align-items: center;\n  justify-content: space-between;\n}\n\ntable {\n  margin-left: 1.25%;\n}\n\nth {\n  width: 100px;\n}\n\n.table {\n  border: solid 2px black;\n}\n\n.left_side {\n  width: 30%;\n}\n\n.content {\n  display: flex;\n  width: 60%;\n}\n\n.right_side {\n  margin-left: 120px;\n  width: 280px;\n}\n\n.input {\n  margin-bottom: 10px;\n  border: 2px double black;\n  width: 100%;\n}\n\n.submit {\n  width: 75px;\n  height: 30px;\n  border: double 2px black;\n  color: black;\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 20px;\n  font-weight: 600;\n  background-color: white;\n}\n\n.align {\n  margin-top: 15px;\n  float: right;\n}\n"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(r[s]=!0)}for(var a=0;a<e.length;a++){var i=[].concat(e[a]);o&&r[i[0]]||(n&&(i[2]?i[2]="".concat(n," and ").concat(i[2]):i[2]=n),t.push(i))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var o,r,c=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(o=n.next()).done)&&(c.push(o.value),!t||c.length!==t);s=!0);}catch(e){a=!0,r=e}finally{try{s||null==n.return||n.return()}finally{if(a)throw r}}return c}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=r[1],s=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(i," */"),l=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[c].concat(l).concat([u]).join("\n")}return[c].join("\n")}},300:(e,t)=>{var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),c=[];function s(e){for(var t=-1,n=0;n<c.length;n++)if(c[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},o=[],r=0;r<e.length;r++){var a=e[r],i=t.base?a[0]+t.base:a[0],u=n[i]||0,l="".concat(i," ").concat(u);n[i]=u+1;var d=s(l),A={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(c[d].references++,c[d].updater(A)):c.push({identifier:l,updater:p(A,t),references:1}),o.push(l)}return o}function i(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var c=n.nc;c&&(o.nonce=c)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var u,l=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=l(t,r);else{var c=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(c,s[t]):e.appendChild(c)}}function A(e,t,n){var o=n.css,r=n.media,c=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var f=null,h=0;function p(e,t){var n,o,r;if(t.singleton){var c=h++;n=f||(f=i(t)),o=d.bind(null,n,c,!1),r=d.bind(null,n,c,!0)}else n=i(t),o=A.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=s(n[o]);c[r].references--}for(var i=a(e,t),u=0;u<n.length;u++){var l=s(n[u]);0===c[l].references&&(c[l].updater(),c.splice(l,1))}n=i}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={id:o,exports:{}};return e[o](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(426);t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;const r=n(300),c=e=>{const t=document.querySelector(".highest"),n=document.querySelector(".highest_score");t.textContent=Object.values(e)[0][0].user,n.textContent=Object.values(e)[0][0].score;const o=document.querySelector(".shighest"),r=document.querySelector(".shighest_score");o.textContent=Object.values(e)[0][1].user,r.textContent=Object.values(e)[0][1].score;const c=document.querySelector(".lhighest"),s=document.querySelector(".lhighest_score");c.textContent=Object.values(e)[0][2].user,s.textContent=Object.values(e)[0][2].score;const a=document.querySelector(".ehighest"),i=document.querySelector(".ehighest_score");a.textContent=Object.values(e)[0][3].user,i.textContent=Object.values(e)[0][3].score;const u=document.querySelector(".fhighest"),l=document.querySelector(".fhighest_score");u.textContent=Object.values(e)[0][4].user,l.textContent=Object.values(e)[0][4].score;const d=document.querySelector(".thighest"),A=document.querySelector(".thighest_score");if(d.textContent=Object.values(e)[0][5].user,A.textContent=Object.values(e)[0][5].score,void 0!==Object.values(e)[0][6]){const t=document.querySelector(".yhighest"),n=document.querySelector(".yhighest_score");t.textContent=Object.values(e)[0][6].user,n.textContent=Object.values(e)[0][6].score}if(void 0!==Object.values(e)[0][7]){const t=document.querySelector(".khighest"),n=document.querySelector(".khighest_score");t.textContent=Object.values(e)[0][7].user,n.textContent=Object.values(e)[0][7].score}if(void 0!==Object.values(e)[0][8]){const t=document.querySelector(".zhighest"),n=document.querySelector(".zhighest_score");t.textContent=Object.values(e)[0][8].user,n.textContent=Object.values(e)[0][8].score}};r("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/",{method:"POST",body:JSON.stringify({name:'Erez"s coolest game this year'}),headers:{"Content-type":"application/json; charset=UTF-8"}}).then((e=>e.json())).then((e=>console.log(e))),document.querySelector(".align").addEventListener("click",(()=>{const e=document.querySelector(".gname").value,t=document.querySelector(".gscore").value;r("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/4C6FWVQss6TsdhLqUDxm/scores",{method:"POST",body:JSON.stringify({user:e,score:t}),headers:{"Content-type":"application/json; charset=UTF-8"}}).then((e=>e.json())).then((e=>console.log(e))),document.querySelector(".gname").value="",document.querySelector(".gscore").value="",event.preventDefault()})),document.querySelector(".refresh").addEventListener("click",(()=>{r("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/4C6FWVQss6TsdhLqUDxm/scores").then((e=>e.json())).then((e=>c(e)))})),r("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/4C6FWVQss6TsdhLqUDxm/scores/").then((e=>e.json())).then((e=>c(e)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,